// -------------------------------------------------- //
// This file is autogenerated by pioasm; do not edit! //
// -------------------------------------------------- //

#pragma once

#if !PICO_NO_HARDWARE
#include "hardware/pio.h"
#endif

// ----- //
// clock //
// ----- //

#define clock_wrap_target 0
#define clock_wrap 1

static const uint16_t clock_program_instructions[] = {
            //     .wrap_target
    0xb042, //  0: nop                    side 1     
    0xa042, //  1: nop                    side 0     
            //     .wrap
};

#if !PICO_NO_HARDWARE
static const struct pio_program clock_program = {
    .instructions = clock_program_instructions,
    .length = 2,
    .origin = -1,
};

static inline pio_sm_config clock_program_get_default_config(uint offset) {
    pio_sm_config c = pio_get_default_sm_config();
    sm_config_set_wrap(&c, offset + clock_wrap_target, offset + clock_wrap);
    sm_config_set_sideset(&c, 1, false, false);
    return c;
}

#include "hardware/clocks.h"
static inline void clock_program_init(PIO pio, uint sm, uint offset, uint pin, float freq) {
    pio_gpio_init(pio, pin);
    pio_sm_set_consecutive_pindirs(pio, sm, pin, 1, true);
    pio_sm_config c = clock_program_get_default_config(offset);
    sm_config_set_sideset_pins(&c, pin);
    float div = clock_get_hz(clk_sys) / (freq * 2);
    sm_config_set_clkdiv(&c, div);
    pio_sm_init(pio, sm, offset, &c);
    pio_sm_set_enabled(pio, sm, true);
}

#endif

